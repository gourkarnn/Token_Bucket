package javaapplication56;

import javax.swing.Timer;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author Nayan
 */

//Use of Swing in java to design Frame for 
//display of animation by drag and drop technique.

public class TokenAnimation extends javax.swing.JFrame {

    public TokenAnimation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int z=0;
    ArrayList<Integer> arr=new ArrayList<>(); //array list stores integer value corresponding to the position of token.
    //then this arraylist is traverse accordingly in the order integer is stored to get the actual simulation.
    
    //Give location of image according to your machine
    Icon imga=new ImageIcon("C:\\Users\\Nayan\\Desktop\\img1.png");
    Icon imgb=new ImageIcon("C:\\Users\\Nayan\\Desktop\\img2.png");
    Icon imgc=new ImageIcon("C:\\Users\\Nayan\\Desktop\\img3.png");
    Icon imgempty=new ImageIcon("C:\\Users\\Nayan\\Desktop\\imgempty.png");
    
    Timer t=new Timer(1000,new ActionListener()
    {
        
        @Override
        public void actionPerformed(ActionEvent e) {
            int flag=arr.get(z);
            
            switch(flag)  //the value from arraylist is taken and acoording to that value the Icon is set to get actual animation.
            {
                case 1:
                    jLabel1.setIcon(imga);
                    z++;
                    break;
                    
                case 2:
                    jLabel1.setIcon(imgb);
                    z++;
                    break;
                    
                case 3:
                    jLabel1.setIcon(imgempty);
                    z++;
                    break;    
            
                case 4:
                    jLabel1.setIcon(imgc);
                    z++;
                    break;
            
            }
        }
    });

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        t.start();
                Bucket b = new Bucket(10,this);          //Bucket Class to instantiate Bucket
		Thread tokens = new AddTokenThread(b);   //To add token at run time using thread
		Thread packets = new AddPacketThread(b); //To give request for packet at run time using thread
		try{
                        //to add synchronization between multiple threads
			tokens.start();
			packets.start();
                        tokens.join();
                        packets.join();
                }
		catch(Exception e){
                
                }
    
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    t.stop();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            System.out.println("The working is interupted");
        
        }
        //</editor-fold>
        TokenAnimation fr=new TokenAnimation();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                fr.setVisible(true);
                fr.setTitle("TOKEN BUCKET SIMULATION");
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}





//CLASS ADDTOKEN TO ADD TOKENS IN BUCKET AT RUN TIME USING THREAD.

class AddTokenThread extends Thread{
	Bucket b;
        int packets;
	AddTokenThread(Bucket b){
		this.b = b;
                this.packets=b.packets;
        }
	public void run(){
		while(true){
                            if(b.packets<=0)
                                break;
                            
                            b.addToken(1);
                            try{
                                Thread.sleep(1000);
                            } catch(Exception e){}
                        
                }
	}
}




//REQUEST IS THROWN AT RUN TIME BY THREAD FOR PACKETS ON NETWORK LAYER

class AddPacketThread extends Thread{
	Bucket b;
        int packets;
	AddPacketThread(Bucket b){
		this.b = b;
                this.packets=b.packets;
        }

	public void run(){
		while(true){
			if(b.packets<=0)
                            break;
                    
                        try{
				Thread.sleep(500 + (int) (Math.random()*3000));
			}
			catch(Exception e){}
			b.sendPacket(1 + (int) (Math.random()*9));
                        try{
				Thread.sleep(500 + (int) (Math.random()*3000));
			}
			catch(Exception e){}
                        
                        
                        
                
                }
	}
}





//MANAGES AND WORKING OF TOKEN BUCKET
//TOKEN IS ADDED AND ALSO THE REQUEST OF PACKET ON NETWORK LAYER IS DEMANDED 
//SYNCHRONIZATION BETWEEN THREADS FOR WORKING IN MULTIPLE THREAD ENVIRONMENT.

class Bucket{
	public int tokens, maxsize,packets;
        Scanner sc=new Scanner(System.in);
        TokenAnimation fr;
        Bucket(int max,TokenAnimation fr){
		tokens = 0;
                this.fr=fr;
		maxsize = max;
                System.out.println("Enter packets to be send");
                packets=sc.nextInt();
        }

	synchronized void addToken(int n) {
		if(tokens >= maxsize) return;
		tokens += 1;
                
                System.out.println("Added a token. Total:" + tokens);
                fr.arr.add(1);
                fr.arr.add(2);
                fr.arr.add(3);
    	}

	synchronized void sendPacket(int n){
		System.out.println("/////Packet of size " + n + " arrived/////");
		if(n > tokens){
			System.out.println("****Packet discarded,not having tokens***");
		}
		else{
			tokens -= n;
			System.out.println("");
                        System.out.println("**PACKET SENT FROM BUCKET**");
                        System.out.println("Forwarding packet");
                        fr.arr.add(4);
                        packets-=n;
                        if(packets>0)
                        System.out.println("<<<<<Remaining packets are: "+packets+">>>>>");
                        else
                            System.out.println("ALL PACKETS SENT TO NETWORK");
                }
	}
}

